#BlueJ class context
comment0.target=CountryExports
comment0.text=\r\n\ The\ CSV\ file\ exportdata.csv\ has\ information\ on\ the\ export\ products\ of\ countries;\ you\ can\ download\ a\ .zip\ folder\ with\ this\ and\ other\ export\ data\ files\ here.\r\nIn\ particular\ it\ has\ three\ column\ headers\ labeled\ Country,\ Exports,\ and\ Value\ (dollars).\ The\ Country\ column\ represents\ a\ country\ from\ the\ world,\ the\ Exports\ \r\ncolumn\ is\ a\ list\ of\ export\ items\ for\ a\ country,\ and\ the\ Value\ (dollars)\ column\ is\ the\ dollar\ amount\ in\ millions\ of\ their\ exports\ in\ the\ format\ of\ a\ dollar\ sign,\r\n\ followed\ by\ an\ integer\ number\ with\ a\ comma\ separator\ every\ three\ digits\ from\ the\ right.\ An\ example\ of\ such\ a\ number\ might\ be\ \u201C$400,000,000\u201D.\r\n
comment1.params=parser\ amount
comment1.target=void\ bigExporters(org.apache.commons.csv.CSVParser,\ java.lang.String)
comment1.text=\r\n\ 5.\ Write\ a\ void\ method\ named\ bigExporters\ that\ has\ two\ parameters,\ parser\ is\ a\ CSVParser,\ and\ amount\ is\ a\ String\ in\ the\ format\ of\ a\ dollar\ sign,\ \r\n\ followed\ by\ an\ integer\ number\ with\ a\ comma\ separator\ every\ three\ digits\ from\ the\ right.\ An\ example\ of\ such\ a\ string\ might\ be\ \u201C$400,000,000\u201D.\ \r\n\ This\ method\ prints\ the\ names\ of\ countries\ and\ their\ Value\ amount\ for\ all\ countries\ whose\ Value\ (dollars)\ string\ is\ longer\ than\ the\ amount\ string.\r\n\ \ You\ do\ not\ need\ to\ parse\ either\ string\ value\ as\ an\ integer,\ just\ compare\ the\ lengths\ of\ the\ strings.\ For\ example,\ if\ bigExporters\ is\ called\ with\ the\ file\r\n\ \ \ exports_small.csv\ and\ amount\ with\ the\ string\ $999,999,999,\ then\ this\ method\ would\ print\ eight\ countries\ and\ their\ export\ values\ shown\ here\r\n
comment2.params=parser\ exportItem
comment2.target=int\ numberOfExporters(org.apache.commons.csv.CSVParser,\ java.lang.String)
comment2.text=\r\n\ Write\ a\ method\ named\ numberOfExporters,\ which\ has\ two\ parameters,\ parser\ is\ a\ CSVParser,\ and\ exportItem\ is\ a\ String.\ \r\n\ This\ method\ returns\ the\ number\ of\ countries\ that\ export\ exportItem.\ \r\n\ For\ example,\ using\ the\ file\ exports_small.csv,\ this\ method\ called\ with\ the\ item\ \u201Cgold\u201D\ would\ return\ 3.\r\n
comment3.params=parser\ export1\ export2
comment3.target=void\ listExportersOfTwoProducts(org.apache.commons.csv.CSVParser,\ java.lang.String,\ java.lang.String)
comment3.text=\r\n\ Write\ a\ void\ method\ named\ listExportersTwoProducts\ that\ has\ three\ parameters,\ parser\ is\ a\ CSVParser,\ exportItem1\ is\ a\ String\ and\ exportItem2\ is\ a\ String.\ \r\n\ This\ method\ prints\ the\ names\ of\ all\ the\ countries\ that\ have\ both\ exportItem1\ and\ exportItem2\ as\ export\ items.\ \r\n\ For\ example,\ using\ the\ file\ exports_small.csv,\ this\ method\ called\ with\ the\ items\ \u201Cgold\u201D\ and\ \u201Cdiamonds\u201D\ would\ print\ the\ countries\r\n
comment4.params=parser\ Country
comment4.target=java.lang.String\ countryInfo(org.apache.commons.csv.CSVParser,\ java.lang.String)
comment5.params=
comment5.target=void\ Tester()
numComments=6
